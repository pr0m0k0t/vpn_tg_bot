import asyncio
from aiogram import Router, types, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from aiogram.types import LabeledPrice

from config.messages import *
from services.keyboards import *
from config.settings import PAYMENTS_PROVIDER_TOKEN, BOT_TOKEN
from aiogram.enums import ParseMode
from database.database_mysql import UserDatabaseMySQL
from config.settings import DB_HOST, DB_USER, DB_PASSWORD, DB_NAME

db = UserDatabaseMySQL(DB_HOST, DB_USER, DB_PASSWORD, DB_NAME)

client_router = Router()
vpn_service = VPNService()

bot = Bot(token=BOT_TOKEN,
          default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN_V2))

FREE_DAYS_SECONDS = 3 * 24 * 60 * 60


@client_router.message(CommandStart(deep_link=False))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    user = db.get_user(user_id)
    now = int(time.time())
    expiry_time = now + FREE_DAYS_SECONDS
    username = message.from_user.username or f"user{user_id}"

    if not user:
        vpn_data = await vpn_service.create_vpn_user(user_id, username)

        if vpn_data is not None:
            if 'uuid' in vpn_data and 'config' in vpn_data:
                db.add_user(user_id, username, vpn_data['uuid'], vpn_data['config'], expiry_time)
                caption = start_message(username)
                await message.answer_photo(photo=FSInputFile("logo.jpg"),
                                             caption=caption,
                                             parse_mode=ParseMode.MARKDOWN_V2,
                                             reply_markup=main_menu_kb)
            else:
                print("–û—à–∏–±–∫–∞: –í vpn_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á uuid –∏–ª–∏ config")
        else:
            print("–û—à–∏–±–∫–∞: vpn_service.create_vpn_user –≤–µ—Ä–Ω—É–ª None")
    else:
        if user.get('expiry_time', 0) > now:
            await message.answer(success_message(username, user.get('expiry_time', 0)), reply_markup=main_menu_kb)
        else:
            await message.answer("üëã –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é:",
                                 reply_markup=subscribe_kb)


@client_router.message(CommandStart(deep_link=True))
async def cmd_start(message: Message, command: CommandStart):
    user_id = message.from_user.id
    args = command.args  # —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ /start (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
    referrer_id = None

    # –†–∞–∑–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if args and args.startswith("ref_") and args[4:].isdigit():
        referrer_id = int(args[4:])

    user = db.get_user(user_id)
    username = message.from_user.username or f"user_{user_id}"
    now = int(time.time())
    expiry_time = now + FREE_DAYS_SECONDS
    if not user:
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å 3 –¥–Ω—è–º–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        vpn_data = await vpn_service.create_vpn_user(user_id, username)
        if vpn_data is not None:
            # —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—è vpn_uuid –∏ vpn_config —É vpn_data –Ω–µ–ø—É—Å—Ç—ã–µ
            if 'vpn_uuid' in vpn_data and 'vpn_config' in vpn_data:
                result = db.add_user(user_id, username, vpn_data['vpn_uuid'], vpn_data['vpn_config'], expiry_time)
                print('user insert result:', result)
                caption = start_message(username)
                await message.answer_photo(photo=FSInputFile("logo.jpg"),
                                             caption=caption,
                                             parse_mode=ParseMode.MARKDOWN_V2,
                                             reply_markup=main_menu_kb)
            else:
                print("–û—à–∏–±–∫–∞: –í vpn_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç vpn_uuid –∏–ª–∏ vpn_config")
        else:
            print("–û—à–∏–±–∫–∞: vpn_service.create_vpn_user –≤–µ—Ä–Ω—É–ª None")

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª ‚Äî –ø—Ä–æ–¥–ª—è–µ–º —Å—Ä–æ–∫ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
        if referrer_id and referrer_id != user_id:
            inviter = db.get_user(referrer_id)
            if inviter:
                old_expiry = inviter.get("expiry_time", 0)
                base_time = old_expiry if old_expiry > now else now
                new_expiry = base_time + 3 * 24 * 3600 * 1000  # +3 –¥–Ω—è
                db.update_expiry(referrer_id, new_expiry)
                await bot.send_message(referrer_id,
                                       f"–í–∞—à –¥—Ä—É–≥ @{message.from_user.username or user_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!"
                                       f" –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –µ—â—ë –Ω–∞ 3 –¥–Ω—è.")
    else:
        print(f"time left: {time.ctime(expiry_time)}")
        if user.get('expiry_time', 0) > now:
            await message.answer(f"üëã –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {time.ctime(int(user.get('expiry_time')))}",
                                 reply_markup=main_menu_kb)
        else:
            await message.answer("üëã –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é:",
                                 reply_markup=subscribe_kb)

@client_router.callback_query(F.data == "back_to_subs")
@client_router.callback_query(lambda c: c.data == "subscribe")
async def process_subscribe(call: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        await bot.delete_message(data['chat_id'], data['message1_id'])
        await bot.delete_message(data['chat_id'], data['message_id'])
        await state.clear()
    except:
        pass

    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=subscribe_kb)

@client_router.callback_query(F.data == "back_to_device")
@client_router.callback_query(F.data=="select_dev")
async def select_dev(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer(choose_device(),
                              parse_mode=ParseMode.MARKDOWN_V2,
                              reply_markup=select_device_kb)


@client_router.callback_query(lambda c: c.data == "invite")
async def process_invite(call: CallbackQuery):
    user_id= call.from_user.id

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    referral_link = f"https://t.me/{(await bot.me()).username}?start=ref_{user_id}"

    await call.message.delete()
    await call.message.answer(ref_link(referral_link),
                              parse_mode=ParseMode.MARKDOWN_V2,
                              reply_markup=back_to_menu_kb)


@client_router.callback_query(lambda c: c.data == "help")
async def process_help(call: CallbackQuery):
    await call.message.delete()
    await call.message.answer(help_message(),
                              parse_mode=ParseMode.MARKDOWN_V2,
                              reply_markup=back_to_menu_kb)


@client_router.callback_query(lambda c: c.data == "back_to_menu")
async def process_back(call: CallbackQuery):
    username = call.from_user.username
    user_id = call.from_user.id

    user = db.get_user(user_id)
    expiry_time = user.get("expiry_time", 0)

    await call.message.delete()
    await call.message.answer(success_message(username, expiry_time),
                              parse_mode=ParseMode.MARKDOWN_V2,
                              reply_markup=main_menu_kb)


@client_router.callback_query(lambda c: c.data.startswith("plan_"))
async def process_plan(call: CallbackQuery, state: FSMContext):
    months = int(call.data.split("_")[1])
    await call.message.delete()  # –£–¥–∞–ª—è–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # –ó–¥–µ—Å—å –¥–∞–ª—å—à–µ –≤—ã–∑—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É (send_invoice) –∏–ª–∏ –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É
    mes1 = await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...")
    await state.update_data(message1_id=mes1.message_id)
    await asyncio.sleep(3)
    #await call.message.delete()
    if months == 1:
        amount = 9900  # amount –≤ –∫–æ–ø–µ–π–∫–∞—Ö (99 —Ä—É–±–ª–µ–π)
        description = "–î–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü"
    elif months == 3:
        amount = 24900
        description = '–î–æ—Å—Ç—É–ø –Ω–∞ 3 –º–µ—Å—è—Ü–∞'
    elif months == 6:
        amount = 44900 # 75%
        description = '–î–æ—Å—Ç—É–ø –Ω–∞ –ø–æ–ª–≥–æ–¥–∞'
    elif months == 12:
        amount = 79900 # 66%
        description = '–î–æ—Å—Ç—É–ø –Ω–∞ –≥–æ–¥'

    prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN", amount=amount)]
    invoice = await call.message.answer_invoice(
        title="VPN –ü–æ–¥–ø–∏—Å–∫–∞",
        description=description,
        provider_token=PAYMENTS_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="vpn-subscription",
        payload="vpn-payment-payload"
    )
    await state.update_data(chat_id =invoice.chat.id, message_id = invoice.message_id)
    await call.message.answer('–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                              reply_markup=back_to_subs_kb)


@client_router.pre_checkout_query(lambda query: True)
async def checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@client_router.message(F.successful_payment)
async def successful_payment(message: Message, state: FSMContext):
    await message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.")
    user_id, months = map(int, message.successful_payment.invoice_payload.split(":"))
    now = int(time.time())
    user = db.get_user(user_id)

    current_expiry = user.get("expiry_time", 0) if user else 0
    base_time = current_expiry if current_expiry > now else now

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—Ü—ã (30 –¥–Ω–µ–π –Ω–∞ –º–µ—Å—è—Ü –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    new_expiry = base_time + months * 30 * 24 * 3600 * 1000

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
    db.update_expiry(user_id, new_expiry)
    await message.answer(success_pay(new_expiry),
                         reply_markup=select_device_kb)


@client_router.callback_query(F.data.startswith("select_device_"))
async def select_device(call: CallbackQuery):
    device = call.data.split("_")[2]
    user_id = call.from_user.id

    if device == "1":
        await call.message.edit_text('–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ IPhone —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º',
                                     reply_markup=await device1_kb(user_id))
    elif device == "2":
        await call.message.edit_text('–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º',
                                     reply_markup=await device2_kb(user_id))
    elif device == "3":
        await call.message.edit_text('–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ü–ö —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º',
                                     reply_markup=await device3_kb(user_id))
    elif device == "4":
        await call.message.edit_text('–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ Mac —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º',
                                     reply_markup=await device1_kb(user_id))